@inherits Patternfly.Components.Base.PatternflyComponentBase
@typeparam TItem
@using Outrage.Patternfly.Components.Utilities

<div class="@Classes" @attributes="AdditionalAttributes">
    <span id="@id.With("select-single-typeahead-expanded-label")" hidden>New</span>

    <div class="pf-c-select__toggle pf-m-typeahead">
        <div class="pf-c-select__toggle-wrapper">
            <input class="pf-c-form-control pf-c-select__toggle-typeahead"
                   type="text"
                   id="@id.With("select-single-typeahead-expanded-typeahead")"
                   aria-label="Type to filter"
                   placeholder="@Placeholder"
                   @bind-value="this.Text" @bind-value:event="oninput"
                   @onkeydown="HandleEnterKey" />
        </div>
        @if (OnItemCreated.HasDelegate && !String.IsNullOrEmpty(this.Text))
        {
            <button class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                    type="button"
                    aria-label="Clear all"
                @onclick="CreateItem">
                <Icon Name="@IconCheck" Size="@IconSize" Weight="@IconWeight" Library="@IconLibrary" />
            </button>
        }

        @if (!String.IsNullOrEmpty(this.Text))
        {
            <button class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                    type="button"
                    aria-label="Clear all"
                @onclick="ClearSearch">
                <Icon Name="@IconClear" Size="@IconSize" Weight="@IconWeight" Library="@IconLibrary" />
            </button>
        }

        <button class="pf-c-button pf-m-plain pf-c-select__toggle-button"
                type="button"
                id="@id.With("select-single-typeahead-expanded-toggle")"
                aria-haspopup="true"
                aria-expanded="true"
                aria-labelledby="@id.With("select-single-typeahead-expanded-label") @id.With("select-single-typeahead-expanded-toggle")"
                aria-label="Select"
                @onclick="ToggleExpanded">
            <Icon Name="@IconCaret" class="pf-c-select__toggle-arrow" Size="@IconSize" Weight="@IconWeight" Library="@IconLibrary" />
        </button>
    </div>

    <ul class="pf-c-select__menu"
        aria-labelledby="@id.With("select-single-typeahead-expanded-label")"
        role="listbox"
        hidden="@(!Expanded)">
        @foreach (var item in MatchedItems)
        {
            var value = item?.ToString();
            if (ItemToString != null && item != null)
            {
                value = ItemToString(item.Item);
            }
            if (value != null)
            {
                string mark = string.Empty;
                string notmark = string.Empty;
                if (Highlight)
                {
                    mark = value.Substring(0, Math.Min(this.Text.Length, value.Length));
                    notmark = value.Substring(Math.Min(value.Length, this.Text.Length));
                }
                else
                {
                    notmark = value;
                }

                <li role="presentation" @key="item">
                    <button type="button" class="pf-c-select__menu-item" role="option" @onclick="() => SelectItem(item!)">
                        <mark class="pf-c-select__menu-item--match">@mark</mark>@notmark

                        @if (item?.Selected ?? false)
                        {
                            <span class="pf-c-select__menu-item-icon">
                                <Icon Name="@IconCheck" Size="@IconSize" Weight="@IconWeight" Library="@IconLibrary" />
                            </span>
                        }

                    </button>
                </li>
            }
        }
    </ul>
</div>

@code {

    string? text = "";
    IEnumerable<TypeaheadItem<TItem>> MatchedItems { get; set; } = Enumerable.Empty<TypeaheadItem<TItem>>();

    [Parameter]
    public string? Text
    {
        set
        {
            this.text = value;
            if (!String.IsNullOrWhiteSpace(this.text))
                this.SearchItem();
        }
        get
        {
            return this.text ?? String.Empty;
        }
    }

    [Parameter] public TItem? Item { get; set; } = default(TItem);
    [Parameter] public bool Expanded { get; set; } = false;
    [Parameter] public string Placeholder { get; set; } = "New";
    [Parameter] public IEnumerable<TypeaheadItem<TItem>> Items { get; set; } = Enumerable.Empty<TypeaheadItem<TItem>>();
    [Parameter] public Func<string, Task<IEnumerable<TypeaheadItem<TItem>>>>? LoadItems { get; set; }
    [Parameter] public EventCallback<TypeaheadItem<TItem>> OnItemSelected { get; set; }
    [Parameter] public EventCallback<TypeaheadItem<TItem>> OnItemCleared { get; set; }
    [Parameter] public EventCallback<string> OnItemCreated { get; set; }
    [Parameter] public string IconCheck { get; set; } = "check";
    [Parameter] public string IconClear { get; set; } = "times-circle";
    [Parameter] public string IconCaret { get; set; } = "caret-down";
    [Parameter] public SizeEnum IconSize { get; set; } = SizeEnum.regular;
    [Parameter] public LibraryEnum IconLibrary { get; set; } = LibraryEnum.fontawesome;
    [Parameter] public WeightEnum IconWeight { get; set; } = WeightEnum.solid;
    [Parameter] public Func<TItem, string>? ItemToString { get; set; } = null;
    [Parameter] public bool Highlight { get; set; } = true;

    public IEnumerable<TypeaheadItem<TItem>> SelectedItems => Items.Where(r => r.Selected);

    public HtmlId id = new();

    protected override void OnInitialized()
    {
        if (Item != null && ItemToString != null)
            text = ItemToString(Item);
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-c-select" });
        if (Expanded)
        {
            classes.Add("pf-m-expanded");
        }

        return classes;
    }

    public async void ClearSearch()
    {
        await OnItemCleared.InvokeAsync();
        this.ClearSelections();
        this.Text = String.Empty;
        this.Expanded = false;
        await this.InvokeAsync(StateHasChanged);
    }

    public async Task ToggleExpanded()
    {
        this.Expanded = !this.Expanded;
        if (this.Expanded)
            await this.SearchItemAsync();
    }

    public async Task SearchItemAsync()
    {
        await this.InvokeAsync(SearchItem);
    }

    public async Task SearchItem()
    {
        var items = this.Items;
        if (!String.IsNullOrEmpty(this.Text))
        {
            if (this.LoadItems != null)
            {
                this.MatchedItems = await LoadItems(this.Text);
            }
            else
            {
                this.MatchedItems = items.Where(r => (r?.ToString() ?? "").StartsWith(this.text, StringComparison.CurrentCultureIgnoreCase));
            }
        }


        if (this.MatchedItems.Any())
            this.Expanded = true;

        this.StateHasChanged();
    }

    protected void ClearSelections()
    {
        foreach (var resetItem in this.Items)
        {
            resetItem.Selected = false;
        }
    }

    protected async Task SelectItem(TypeaheadItem<TItem> item)
    {
        this.ClearSelections();
        item.Selected = true;
        if (ItemToString != null)
        {
            this.Text = ItemToString(item.Item);
        }
        else
        {
            this.Text = item.ToString();
        }

        this.Expanded = false;
        await this.OnItemSelected.InvokeAsync(item);
    }

    public async Task CreateItem()
    {
        var createText = this.Text;
        this.Text = null;
        this.Expanded = false;
        await this.OnItemCreated.InvokeAsync(createText);
    }

    public async Task HandleEnterKey(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
        {
            await this.CreateItem();
        }
    }
}
