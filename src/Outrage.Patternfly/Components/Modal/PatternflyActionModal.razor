@typeparam TItemType
@using Outrage.Patternfly.Components.Modal
@using Outrage.Patternfly.Components.Layout
@using Outrage.Patternfly.Components.Actions
@using Outrage.Patternfly.Components.Button
@using Outrage.Patternfly.Components.Alert
@using Outrage.Patternfly.Components.Page

<PatternflyOnPage>
    <PatternflyModal CreateOnShow="true" @ref="modal" Size="@Size">
        <Header>
            @if (item != null)
            {
                @Header?.Invoke(item)
            }
        </Header>
        <Body>
            @if (item != null)
            {
                @Body?.Invoke(item)
            }
        </Body>
        <Footer>
            <PatternflyStack>
                @if (Confirmation != ConfirmationEnum.custom)
                {
                    <PatternflyStackItem>
                        @if (Confirmation == ConfirmationEnum.ok || Confirmation == ConfirmationEnum.okcancel || Confirmation == ConfirmationEnum.custom)
                        {
                            <PatternflyButton Color="ButtonColor.Primary" Clicked="DoConfirm">@(ConfirmText ?? "Ok")</PatternflyButton>
                        }
                        @if (Confirmation == ConfirmationEnum.close)
                        {
                            <PatternflyButton Color="ButtonColor.Primary" Clicked="DoConfirm">@(ConfirmText ?? "Close")</PatternflyButton>
                        }
                        @if (Confirmation == ConfirmationEnum.okcancel || Confirmation == ConfirmationEnum.custom)
                        {
                            <PatternflyButton Color="ButtonColor.Link" Clicked="DoDecline">@(DeclineText ?? "Cancel")</PatternflyButton>
                        }
                        @if (Confirmation == ConfirmationEnum.yesno)
                        {
                            <PatternflyButton Color="ButtonColor.Primary" Clicked="DoConfirm">@(ConfirmText ?? "Yes")</PatternflyButton>
                            <PatternflyButton Color="ButtonColor.Link" Clicked="DoDecline">@(DeclineText ?? "No")</PatternflyButton>
                        }
                    </PatternflyStackItem>
                }
                else
                {
                    <PatternflyStackItem>
                        @if (item != null)
                        {
                            @Footer?.Invoke(item)
                        }
                    </PatternflyStackItem>
                }

                @if (message != null)
                {
                    <PatternflyStackItem>
                        @message
                    </PatternflyStackItem>
                }
            </PatternflyStack>
        </Footer>
    </PatternflyModal>
</PatternflyOnPage>

@code {
    PatternflyModal modal = default!;
    TItemType? item;
    string? message = null;

    [Parameter] public RenderFragment<TItemType>? Header { get; set; }
    [Parameter] public RenderFragment<TItemType>? Body { get; set; }
    [Parameter] public RenderFragment<TItemType>? Footer { get; set; }
    [Parameter] public ConfirmationEnum Confirmation { get; set; } = ConfirmationEnum.close;
    [Parameter] public EventCallback<TItemType> Confirmed { get; set; }
    [Parameter] public EventCallback<TItemType> Declined { get; set; }
    [Parameter] public string? ConfirmText { get; set; }
    [Parameter] public string? DeclineText { get; set; }
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Medium;

    public async Task Show(TItemType item)
    {
        this.message = null;
        this.item = item;

        await this.modal.Show();
    }

    public async Task Show(Func<Task<TItemType>> load)
    {
        this.message = null;
        this.item = default(TItemType);

        await this.modal.Show();

        this.item = await load();
        await this.InvokeAsync(StateHasChanged);
    }

    public async Task Hide()
    {
        await this.modal.Hide();
    }

    public async Task DoConfirm(MouseEventArgs args)
    {
        try
        {
            if (this.Confirmed.HasDelegate)
                await this.Confirmed.InvokeAsync(item);
            await this.modal.Hide();
        }
        catch (ActionModalException ex)
        {
            this.message = ex.Message;
            await this.InvokeAsync(StateHasChanged);
        }
    }

    public async Task DoDecline(MouseEventArgs args)
    {
        try
        {
            if (this.Declined.HasDelegate)
                await this.Declined.InvokeAsync(item);
            await this.modal.Hide();
        }
        catch (ActionModalException ex)
        {
            this.message = ex.Message;
            await this.InvokeAsync(StateHasChanged);
        }
    }
}

