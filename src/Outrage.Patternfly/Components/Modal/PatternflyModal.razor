@inherits Patternfly.Components.Base.PatternflyComponentBase
@using Outrage.Patternfly.Components.Utilities
@using Outrage.Patternfly.Components.Backdrop
@using Outrage.Patternfly.Components.Layout

<div hidden="@(!this.Shown)">
    @if (!this.CreateOnShow || (this.CreateOnShow && this.Shown))
    {
        <PatternflyBackdrop>
            <PatternflyBullseye>
                <div class="@Classes" style="max-height: 80vh;" @attributes="AdditionalAttributes" aria-modal="true" aria-labelledby="@modalId.With("modal-help-title")" aria-describedby="@modalId.With("modal-help-description")">
                    <div class="pf-v5-c-modal-box__close">
                        <button class="pf-v5-c-button pf-m-plain" type="button" aria-label="Close" @onclick="Hide">
                            <Icon Name="@IconClose" Library="@IconLibrary" Weight="@IconWeight" />
                        </button>
                    </div>
                    <header class="pf-v5-c-modal-box__header pf-m-help">
                        <div class="pf-v5-c-modal-box__header-main">
                            <h1 class="pf-v5-c-modal-box__title" id="@modalId.With("modal-help-title")">
                                @Header
                            </h1>
                            @if (Help != null)
                            {
                                <div class="pf-v5-c-modal-box__description" id="@modalId.With("modal-help-description")" hidden="@(!HelpShown)">
                                    @Help
                                </div>
                            }
                        </div>
                        @if (Help != null)
                        {
                            <div class="pf-v5-c-modal-box__header-help">
                                <button class="pf-v5-c-button pf-m-plain" type="button" aria-label="Help" @onclick="ToggleHelp">
                                    <Icon Name="@IconHelp" Library="@IconLibrary" Weight="@IconWeight" />
                                </button>
                            </div>
                        }
                    </header>
                    <div class="pf-v5-c-modal-box__body" style="position:relative; overflow:auto;">
                        @Body
                    </div>
                    <footer class="pf-v5-c-modal-box__footer">
                        @Footer
                    </footer>
                </div>
            </PatternflyBullseye>
        </PatternflyBackdrop>
    }
</div>

@code {
    HtmlId modalId = new();

    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment? Body { get; set; }

    [Parameter]
    public bool CreateOnShow { get; set; } = false;

    [Parameter]
    public RenderFragment? Footer { get; set; }

    [Parameter]
    public RenderFragment? Help { get; set; }

    [Parameter]
    public ModalSize Size { get; set; } = ModalSize.Medium;

    [Parameter]
    public bool Shown { get; set; } = false;

    private bool HelpShown { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ShownChanged { get; set; }

    [Parameter] public LibraryEnum IconLibrary { get; set; } = PatternflyDefaults.IconLibrary;
    [Parameter] public WeightEnum IconWeight { get; set; } = PatternflyDefaults.IconWeight;
    [Parameter] public string IconHelp { get; set; } = "question-circle";
    [Parameter] public string IconClose { get; set; } = "times";

    public async Task Show()
    {
        this.Shown = true;
        await this.InvokeAsync(StateHasChanged);
        if (ShownChanged.HasDelegate)
            await ShownChanged.InvokeAsync(this.Shown);
    }

    public async Task Hide()
    {
        this.Shown = false;
        await this.InvokeAsync(StateHasChanged);
        if (ShownChanged.HasDelegate)
            await ShownChanged.InvokeAsync(this.Shown);
    }

    public async Task ToggleHelp()
    {
        this.HelpShown = !this.HelpShown;
        this.StateHasChanged();
        await this.ShownChanged.InvokeAsync(this.HelpShown);
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-v5-c-modal-box" });
        if (Size == ModalSize.Small)
            classes.Add("pf-m-sm");
        if (Size == ModalSize.Medium)
            classes.Add("pf-m-md");
        if (Size == ModalSize.Large)
            classes.Add("pf-m-lg");
        if (Size == ModalSize.Full)
            classes.Add("pf-m-full");

        return classes;
    }
}
