@using Outrage.Patternfly.Components.Button
@using Outrage.Patternfly.Models
@using Outrage.Patternfly.Services

@typeparam TItemModel
@inherits Patternfly.Components.Base.PatternflyComponentBase

<CascadingValue Name="Parent" Value="this">
    <ul class="@Classes" @attributes="AdditionalAttributes" role="list" aria-label="@AriaLabel">
        @foreach(var item in Items ?? Enumerable.Empty<TItemModel>())
        {
            <li class="pf-v5-c-data-list__item @(OnItemClicked.HasDelegate ? "pf-m-selectable" : string.Empty) @(item.Equals(selectedItem) ? "pf-m-selected" : string.Empty)" 
                    aria-labelledby="@(ItemAriaLabel != null ? ItemAriaLabel(item) : String.Empty)" @onclick="@(() => OnItemSelected(item))" @key="item">
                @if (ItemTemplate != null)
                {
                    @ItemTemplate(item)
                }
            </li>
        }
    </ul>
</CascadingValue>

@code {
#pragma warning disable BL0007
    [Parameter] public bool Compact { get; set; }

    [Parameter] public IEnumerable<DataItemWrapperModel<TItemModel>>? WrappedItems { get; set; }

    [Parameter] public IEnumerable<TItemModel>? Items
    {
        get => WrappedItems?.Select(r => r.Item);
        set => WrappedItems = value?.Select(r => new DataItemWrapperModel<TItemModel>(r));
    }

    [Parameter] public EventCallback<TItemModel> OnItemClicked { get; set; }

    [Parameter] public string? AriaLabel { get; set; }

    [Parameter] public Func<TItemModel, string>? ItemAriaLabel { get; set; }

    [Parameter] public RenderFragment<TItemModel>? ItemTemplate { get; set; }

    protected TItemModel? selectedItem;

    protected async Task OnItemSelected(TItemModel item)
    {
        selectedItem = item;
        if (OnItemClicked.HasDelegate)
        {
            await OnItemClicked.InvokeAsync(item);
        }
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-v5-c-data-list" });

        if (Compact)
            classes.Add("pf-m-compact");

        return classes;
    }
}