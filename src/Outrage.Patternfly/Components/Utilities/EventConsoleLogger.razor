@inject IJSRuntime JSRuntime
@using Outrage.EventBus
@inject IClientEventBus Bus

@code {
    ISubscriber? subscriber;

    protected override Task OnInitializedAsync()
    {
        this.subscriber = this.Bus.Subscribe(this.HandleMessage);
        return base.OnInitializedAsync();
    }

    public async Task HandleMessage(EventContext context, IMessage message)
    {
        var typeString = message.GetType().ToString();
        var eventString = Newtonsoft.Json.JsonConvert.SerializeObject(message);
        var eventLog = $"event: {typeString}: {eventString}";
        await InvokeAsync(() =>
        {
            JSRuntime.InvokeVoidAsync("console.log", new object[] { eventLog });
        });
    }
}
