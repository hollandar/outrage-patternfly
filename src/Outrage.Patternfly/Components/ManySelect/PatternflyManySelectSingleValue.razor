@typeparam TKey
@typeparam TValue

@if (ToViewString != null)
{
    <span>
        @ToViewString(value)
    </span>
}
else
{
    <span>
        @value?.ToString() ?? "Not found."
    </span>
}

@code {
    TValue? value;
    [Parameter] public Func<TKey, Task<TValue?>>? OnLoadItem { get; set; }
    [Parameter] public Func<TValue?, string>? ToViewString { get; set; }
    [CascadingParameter(Name = "SelectParent")] public PatternflyManySelect<TKey> Parent { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (Parent == null)
        {
            throw new Exception("Search and select parent is not available.");
        }

        this.Parent.EventAggregator.Subscribe<ManySelectKeysChangedMessage<TKey>>(async (c, m) =>
        {
            var key = m.Keys.SingleOrDefault();
            if (key != null && OnLoadItem != null)
            {
                this.value = await OnLoadItem(key);
                await this.InvokeAsync(StateHasChanged);
            }
        });

        var key = this.Parent.SelectedKeys.SingleOrDefault();
        if (key != null && OnLoadItem != null)
        {
            this.value = await OnLoadItem(key);
        }

        await base.OnInitializedAsync();
    }
}
