@implements IDisposable
@typeparam TKey
@typeparam TValue

@if (typeof(TKey).IsGenericType && typeof(TKey).GetGenericTypeDefinition() == typeof(Nullable<>) && this.Parent.Value.Count == 0)
{
    <span class="pf-c-select__toggle-text">(none) </span>
}
else if (ToViewString != null)
{
    string valueString = ToViewString(value);
    if (string.IsNullOrEmpty(valueString))
    {
        <span class="pf-c-select__toggle-text">&nbsp; </span>
    }
    else
    {
        <span class="pf-c-select__toggle-text">
            @valueString
        </span>
    }
}
else
{
    <span class="pf-c-select__toggle-text">
        @value?.ToString() ?? "Not found."
    </span>
}

@code {
    TValue? value;
    [Parameter] public Func<TKey, Task<TValue?>>? OnLoadItem { get; set; }
    [Parameter] public Func<TValue?, string>? ToViewString { get; set; }
    [CascadingParameter(Name = "SelectParent")] public PatternflyManySelect<TKey> Parent { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (Parent is null)
        {
            throw new Exception("Search and select parent is not available.");
        }
        Parent.OnKeysChanged += KeysChanged;

        await KeysChanged(Parent.Value);

        await base.OnInitializedAsync();
    }

    public async Task KeysChanged(HashSet<TKey> keys)
    {
        var key = keys.SingleOrDefault();
        if (!(default(TKey)?.Equals(key) ?? key == null))
        {
            if (OnLoadItem == null)
            {
                throw new Exception("OnLoadItem is not available.");
            }

            this.value = await OnLoadItem(key!);
            await this.InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        if (Parent is not null)
        {
            Parent.OnKeysChanged -= KeysChanged;
        }
    }
}
