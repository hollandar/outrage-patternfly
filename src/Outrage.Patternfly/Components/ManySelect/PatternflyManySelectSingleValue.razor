@typeparam TKey
@typeparam TValue

@if (string.IsNullOrEmpty(valueString))
{
    <span class="pf-c-select__toggle-text">&nbsp;</span>
}
else
{
    <span class="pf-c-select__toggle-text">
        @valueString
    </span>
}

@code {
    TValue? value;
    string valueString = string.Empty;

    [Parameter] public Func<TKey, Task<TValue?>>? OnLoadItem { get; set; }
    [Parameter] public Func<TValue?, string>? ToViewString { get; set; }
    [CascadingParameter(Name = "SelectParent")] public PatternflyManySelect<TKey> Parent { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (Parent == null)
        {
            throw new Exception("Search and select parent is not available.");
        }
        if (this.Parent.EventAggregator != null) {
            this.Parent.EventAggregator.Subscribe<ManySelectKeysChangedMessage<TKey>>(async (c, m) =>
            {
                var key = m.Keys.SingleOrDefault();
                if (!(default(TKey)?.Equals(key) ?? key == null))
                {
                    if (OnLoadItem == null)
                    {
                        throw new Exception("OnLoadItem is not available.");
                    }

                    this.value = await OnLoadItem(key!);
                    await this.InvokeAsync(StateHasChanged);
                }
            });
        }

        var key = this.Parent.SelectedKeys.SingleOrDefault();
        if (!(default(TKey)?.Equals(key) ?? key == null))
        {
            if (OnLoadItem == null)
            {
                throw new Exception("OnLoadItem is not available.");
            }

            this.value = await OnLoadItem(key!);
        }

        if (ToViewString != null)
        {
            valueString = ToViewString(value);
        }
        else
        {
            valueString = value?.ToString() ?? "Not found.";
        }

        await base.OnInitializedAsync();
    }
}
