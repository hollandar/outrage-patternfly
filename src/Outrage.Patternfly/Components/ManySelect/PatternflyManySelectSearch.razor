@using Outrage.Patternfly.Helpers;
@using Outrage.Patternfly.Models;
@typeparam TKey
@typeparam TValue
@inject IJSRuntime JS
@implements IDisposable

@if (Search)
{
    var id = new HtmlId();
    <div class="pf-c-input-group">
        <input id="@searchId"
               type="text"
               class="pf-c-form-control"
               aria-label="Search"
               aria-describedby="@id"
               placeholder="Search..." />
        <button class="pf-c-button pf-m-control"
                type="button"
                id="@id"
                @onclick="@SearchItems">
            <Icon Name="search"></Icon>
        </button>
        <button class="pf-c-button pf-m-control"
                type="button"
        @onclick="@ClearSearch">
            <Icon Name="times"></Icon>
        </button>
    </div>
}
<ul class="pf-c-select__menu"
    role="listbox"
    aria-labelledby="select-single-expanded-label">
    @if (typeof(TKey).IsGenericType && typeof(TKey).GetGenericTypeDefinition() == typeof(Nullable<>))
    {
        var selected = this.Parent.Value.Count == 0;
        <li role="presentation">
            <button type="button"
                    class="pf-c-select__menu-item @(selected?"pf-m-selected":"")"
                    role="option"
                    aria-selected="@selected"
            @onclick="(args) => NullClickedAsync(args)">

                @WhenNull

                @if (selected)
                {
                    <span class="pf-c-select__menu-item-icon">
                        <i class="fas fa-check" aria-hidden="true"></i>
                    </span>
                }
            </button>
        </li>
    }

    @foreach (var item in loadResult?.Values ?? new List<TValue>())
    {
        if (this.Parent != null)
        {
            var selected = this.Parent.IsKeySelected(ToKey!(item));
            <li role="presentation">
                <button type="button"
                        class="pf-c-select__menu-item @(selected?"pf-m-selected":"")"
                        role="option"
                        aria-selected="@selected"
                @onclick="(args) => ValueClickedAsync(args, item)">
                    @if (ToViewString != null)
                    {
                        <div>@ToViewString(item)</div>
                    }
                    else
                    {
                        <div>@item.ToString()</div>
                    }

                    @if (selected)
                    {
                        <span class="pf-c-select__menu-item-icon">
                            <i class="fas fa-check" aria-hidden="true"></i>
                        </span>
                    }
                </button>
            </li>
        }
    }
</ul>


@code {
    string searchId = HtmlId.Create();
    IJSObjectReference module = default!;
    ManySelectLoadResponse<TValue>? loadResult;
    [Parameter, EditorRequired] public Func<ManySelectLoadArgs, Task<ManySelectLoadResponse<TValue>?>>? OnLoadItems { get; set; } = default!;
    [Parameter, EditorRequired] public Func<TValue?, string>? ToViewString { get; set; } = default!;
    [Parameter, EditorRequired] public Func<TValue?, TKey>? ToKey { get; set; } = default!;
    [Parameter] public bool Search { get; set; } = true;
    [Parameter] public bool Multiselect { get; set; } = false;
    [CascadingParameter(Name = "SelectParent")] public PatternflyManySelect<TKey>? Parent { get; set; }
    [Parameter] public string WhenNull { get; set; } = "(none)";

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/Outrage.Patternfly/scripts/components/manyselect/PatternflyManySelectSearch.js");
            await this.module.InvokeVoidAsync("init", searchId, DotNetObjectReference.Create(this));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Refresh()
    {
        
    }

    protected override void OnParametersSet()
    {
        if (Parent == null)
        {
            throw new ArgumentNullException(nameof(Parent));
        }

        if (ToViewString == null)
        {
            throw new ArgumentNullException(nameof(ToViewString));
        }

        if (ToKey == null)
        {
            throw new ArgumentNullException(nameof(ToKey));
        }

        if (OnLoadItems == null)
        {
            throw new ArgumentNullException(nameof(OnLoadItems));
        }

        base.OnParametersSet();
    }

    async Task LoadItems()
    {
        if (OnLoadItems != null)
        {
            var args = new ManySelectLoadArgs(0, 10, String.Empty);
            loadResult = await OnLoadItems(args);
            await InvokeAsync(StateHasChanged);
        }
    }
    [JSInvokable("SearchItems")]
    public async void SearchItems()
    {
        if (OnLoadItems != null)
        {
            var searchText = await this.module.InvokeAsync<string>("getSearchText", searchId);
            var args = new ManySelectLoadArgs(0, 10, searchText);
            loadResult = await OnLoadItems(args);
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task ClearSearch()
    {
        await this.module.InvokeVoidAsync("clearSearch", searchId);
        await LoadItems();
    }

    async Task ValueClickedAsync(MouseEventArgs args, TValue value)
    {
        if (ToKey != null && this.Parent != null)
        {
            var key = this.ToKey(value);
            if (Multiselect)
            {
                await this.Parent.ToggleKeyAsync(key);
            }
            else
            {
                await this.Parent.SetKeysAsync(key);
            }
        }
    }

    async Task NullClickedAsync(MouseEventArgs args)
    {
        await this.Parent.ClearKeysAsync();
    }

    public void Dispose()
    {
        this.module.InvokeVoidAsync("dispose", searchId);
        this.module.DisposeAsync();
    }
}
