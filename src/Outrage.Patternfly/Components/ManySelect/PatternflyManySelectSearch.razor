@using Outrage.Patternfly.Helpers;
@using Outrage.Patternfly.Models;
@typeparam TKey
@typeparam TValue

@if (Search)
{
    var id = new HtmlId();
    <div class="pf-c-input-group">
        <input 
            type="text"
            class="pf-c-form-control"
            aria-label="Search"
            aria-describedby="@id"
            placeholder="Search..."
            @bind-value="searchText"
            @onkeyup="SearchKeyUp" />
        <button 
            class="pf-c-button pf-m-control"
            type="button"
            id="@id"
            @onclick="@SearchItems">
            <Icon Name="search"></Icon>
        </button>
        <button 
            class="pf-c-button pf-m-control"
            type="button"
            @onclick="@ClearSearch">
            <Icon Name="times"></Icon>
        </button>
    </div>
}
<ul class="pf-c-select__menu"
    role="listbox"
    aria-labelledby="select-single-expanded-label">
    @foreach (var item in loadResult?.Values ?? new List<TValue>())
    {
        var selected = this.Parent.IsKeySelected(ToKey(item));
        <li role="presentation">
            <button class="pf-c-select__menu-item @(selected?"pf-m-selected":"")"
                    role="option"
                    aria-selected="@selected"
            @onclick="(args) => ValueClickedAsync(args, item)">
                @if (ToViewString != null)
                {
                    <div>@ToViewString(item)</div>
                }
                else
                {
                    <div>@item.ToString()</div>
                }

                @if (selected)
                {
                    <span class="pf-c-select__menu-item-icon">
                        <i class="fas fa-check" aria-hidden="true"></i>
                    </span>
                }
            </button>
        </li>
    }
</ul>


@code {
    string searchText = string.Empty;
    ManySelectLoadResponse<TValue>? loadResult;
    [Parameter] public Func<ManySelectLoadArgs, Task<ManySelectLoadResponse<TValue>?>>? OnLoadItems { get; set; }
    [Parameter] public Func<TValue?, string>? ToViewString { get; set; }
    [Parameter] public Func<TValue?, TKey>? ToKey { get; set; }
    [Parameter] public bool Search { get; set; } = true;
    [Parameter] public bool Multiselect { get; set; } = false;
    [CascadingParameter(Name = "SelectParent")] public PatternflyManySelect<TKey> Parent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
        await base.OnInitializedAsync();
    }

    async Task LoadItems()
    {
        var args = new ManySelectLoadArgs(0, 10, String.Empty);
        loadResult = await OnLoadItems(args);
        await InvokeAsync(StateHasChanged);
    }

    async Task SearchItems(MouseEventArgs a)
    {
        var args = new ManySelectLoadArgs(0, 10, searchText);
        loadResult = await OnLoadItems(args);
        await InvokeAsync(StateHasChanged);
    }

    async Task ClearSearch()
    {
        this.searchText = String.Empty;
        await LoadItems();
    }

    async Task SearchKeyUp(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
        {
            var loadArgs = new ManySelectLoadArgs(0, 10, searchText);
            loadResult = await OnLoadItems(loadArgs);
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task ValueClickedAsync(MouseEventArgs args, TValue value)
    {
        var key = this.ToKey(value);
        if (Multiselect)
        {
            await this.Parent.ToggleKeyAsync(key);
        }
        else
        {
            await this.Parent.SetKeysAsync(key);
        }
    }
}
