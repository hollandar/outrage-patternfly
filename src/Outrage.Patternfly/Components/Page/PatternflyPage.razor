@using Outrage.Patternfly.Components.Button
@inherits Patternfly.Components.Base.PatternflyComponentBase
@inject NavigationManager Nav

<div class="@Classes" @attributes="AdditionalAttributes">
    <header class="pf-c-page__header" role="banner">
        <div class="pf-c-page__header-brand">
            @if (Toggle != null)
            {
                <div class="pf-c-page__header-brand-toggle">
                    <button class="pf-c-button pf-c-plain" type="button" aria-expanded="false" aria-disabled="false" aria-label="Global navigation" @onclick="ToggleSidebar">@Toggle</button>
                </div>
            }
            @if (Logo != null)
            {
                <a href="#" @onclick="NavigateHome" class="pf-c-page__header-brand-link">
                    @Logo
                </a>
            }
        </div>
        @if (Header != null)
        {
            <div class="pf-c-page__header-nav">@Header</div>
        }
        @if (Tools != null)
        {
            <div class="pf-c-page__header-tools">@Tools</div>
        }
    </header>
    @if (Sidebar != null)
    {
        <div id="@controlsId" class="pf-c-page__sidebar @(sidebar?"pf-m-expanded":"pf-m-collapsed")" aria-expanded="@sidebar">
            <div class="pf-c-page__sidebar-body">@Sidebar</div>
        </div>
    }

    @RenderPageTarget()

    <CascadingValue Name="PatternflyParentPage" Value="this.onPageTarget">
        <main class="pf-c-page__main" tabindex="-1" role="main">
            @if (Sections != null)
            {
                @Sections
            }
            @if (Body != null)
            {
                <PatternflyPageSection Fill="@FillMainContent" Class="page-main-section">@Body</PatternflyPageSection>
            }
            @if (Footer != null)
            {
                <PatternflyPageSection Class="page-footer-section" Sticky="@(StickyFooter ? SectionPosition.bottom: SectionPosition.none)" Color="SectionColor.dark_200">@Footer</PatternflyPageSection>
            }
        </main>
    </CascadingValue>

</div>

@code {
    PatternflyOnPageTarget? onPageTarget = null;
    public bool sidebar = true;
    public HtmlId controlsId = new();

    RenderFragment RenderPageTarget()
    {
        return new RenderFragment(builder =>
        {
            builder.OpenComponent<PatternflyOnPageTarget>(0);
            builder.AddComponentReferenceCapture(1, inst => { onPageTarget = (PatternflyOnPageTarget)inst; });
            builder.CloseComponent();
        });
    }

    [Parameter] public RenderFragment? Toggle { get; set; }
    [Parameter] public RenderFragment? Logo { get; set; }
    [Parameter] public string LogoLinkUrl { get; set; } = "";
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? Tools { get; set; }
    [Parameter] public RenderFragment? Sidebar { get; set; }
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public RenderFragment? Footer { get; set; }
    [Parameter] public RenderFragment? Sections { get; set; }

    [Parameter] public bool FillMainContent { get; set; }
    [Parameter] public bool StickyFooter { get; set; }

    void ToggleSidebar()
    {
        this.sidebar = !sidebar;
        this.StateHasChanged();
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        return new string[] { "pf-c-page" };
    }

    protected virtual void NavigateHome()
    {
        this.Nav.NavigateTo(LogoLinkUrl);
    }

    

    

    
}
