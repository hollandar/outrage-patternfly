@inject IJSRuntime jsRuntime
@using Outrage.Patternfly.Components.Utilities

<h3>
    <button class="pf-v5-c-accordion__toggle @(Visible? "pf-m-expanded":string.Empty)" type="button" aria-expanded="@Visible" @onclick="Show">
        <span class="pf-v5-c-accordion__toggle-text">
            @Header
        </span>

        <span class="pf-v5-c-accordion__toggle-icon">
            <Icon Name="@(Visible?IconExpanded:IconCollapsed)" Library="@IconLibrary" Weight="@IconWeight" />
        </span>
    </button>
</h3>
<div class="pf-v5-c-accordion__expandable-content @(Visible? "pf-m-expanded":string.Empty)" hidden="@(!Visible)">
    <div class="pf-v5-c-accordion__expandable-content-body">@Body</div>
</div>

@code {
    [Parameter]
    public string StateId { get; set; } = HtmlId.Create();

    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment? Body { get; set; }

    [Parameter]
    public bool Visible { get; set; } = false;

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [CascadingParameter(Name = "Accordion")]
    public PatternflyAccordion? Accordion { get; set; }

    [Parameter] public LibraryEnum IconLibrary { get; set; } = PatternflyDefaults.IconLibrary;
    [Parameter] public WeightEnum IconWeight { get; set; } = PatternflyDefaults.IconWeight;
    [Parameter] public string IconCollapsed { get; set; } = "angle-right";
    [Parameter] public string IconExpanded { get; set; } = "angle-down";

    protected override async Task OnInitializedAsync()
    {
        if (this.Accordion != null)
        {
            this.Accordion.Panels.Add(this);
            if (this.Accordion.StateId == StateId && this.Accordion.UseSavedState)
            {
                await this.SetVisible(true);
            }            
        }
    }

    public async Task Show()
    {
        if (this.Accordion != null && this.Accordion.CloseOthers)
        {
            await this.Accordion.CloseAll();
            await this.SetVisible(true);
        }
        else
        {
            await this.SetVisible(!Visible);
        }
    }

    public async Task SetVisible(bool visible)
    {
        if (visible != this.Visible)
        {
            this.Visible = visible;
            await this.InvokeAsync(
                () => { this.StateHasChanged(); }
            );
            await this.OnVisibleChanged();
        }
    }

    public Task OnVisibleChanged()
    {
        return this.VisibleChanged.InvokeAsync(this.Visible);
    }

}