@typeparam TValueType
@using Outrage.Patternfly.Components.Button
@using Outrage.Patternfly.Components.Utilities

@inherits Outrage.Patternfly.Components.Base.PatternflyComponentBase

<div class="@Classes" @attributes="AdditionalAttributes">
    <button class="pf-c-toggle-group__button @(Selected ? "pf-m-selected" : string.Empty)" type="button" @onclick="ToggleClicked">
        @if (Icon != null && IconPosition == IconPosition.Start)
        {
            <span class="pf-c-toggle-group__icon">
                <Icon Name="@Icon" Weight="@IconWeight" Library="@IconLibrary" aria-hidden="true" />
            </span>            
        }
        @if (ChildContent != null)
        {
            <span class="pf-c-toggle-group__text">@ChildContent</span>            
        }
        @if (Icon != null && IconPosition == IconPosition.End)
        {
            <span class="pf-c-toggle-group__icon">
                <Icon Name="@Icon" Weight="@IconWeight" Library="@IconLibrary" aria-hidden="true" />
            </span>            
        }
    </button>
</div>

@code {
    public bool Selected { get { return this.Parent?.Value?.Equals(Value) ?? false; } }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public IconPosition IconPosition { get; set; } = IconPosition.Start;
    [Parameter] public WeightEnum IconWeight { get; set; } = WeightEnum.solid;
    [Parameter] public LibraryEnum IconLibrary { get; set; } = LibraryEnum.fontawesome;
    [Parameter] public EventCallback<TValueType> Clicked { get; set; }
    [Parameter] public TValueType? Value { get; set; }
    [CascadingParameter(Name = "ToggleGroup")] public PatternflyToggleGroup<TValueType>? Parent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.Parent?.AddToggleGroupItem(this);
        await base.OnInitializedAsync();
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-c-toggle-group__item" });
        return classes;
    }

    public async Task ToggleClicked()
    {
        if (this.Parent != null)
            await this.Parent.SetValue(Value);

        if (this.Clicked.HasDelegate)
            await this.Clicked.InvokeAsync(Value);
    }
}
