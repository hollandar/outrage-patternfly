@using Outrage.Patternfly.Components.Button
@using Outrage.Patternfly.Components.Utilities

@inherits Outrage.Patternfly.Components.Base.PatternflyComponentBase

<div class="@Classes" @attributes="AdditionalAttributes" aria-label="@($"{@Color.ToString()} alert")" hidden="@Closed">
    @if (Icon != null)
    {
        <div class="pf-v5-c-alert__icon">
            <Icon Name="@Icon" Library="@IconLibrary" Weight="@IconWeight" aria-hidden="true"/>
        </div>
    }
    <p class="pf-v5-c-alert__title">
        <span class="pf-v5-screen-reader">@Color.ToString() alert:</span>
        @Title
    </p>
    @if (Dismissable)
    {
        <div class="pf-v5-c-alert__action">
            <PatternflyButton Color="ButtonColor.Plain"
                              aria-label="@($"Close alert: {Title}")"
                              Clicked="CloseAlert">
                <Icon Name="@IconClose" Library="@IconLibrary" Weight="@IconWeight" />
            </PatternflyButton>
        </div>
    }
    @if (Description != null || Body != null)
    {
        <div class="pf-v5-c-alert__description">
            @Description
            @Body
        </div>
    }
    @if (Actions != null)
    {
        <div class="pf-v5-c-alert__action-group">
            @Actions
        </div>
    }
</div>

@code {
    [Parameter] public AlertColor Color { get; set; } = AlertColor.Default;
    [Parameter] public string? Icon { get; set; } = null;
    [Parameter] public string IconClose { get; set; } = "times";
    [Parameter] public WeightEnum IconWeight { get; set; } = PatternflyDefaults.IconWeight;
    [Parameter] public LibraryEnum IconLibrary { get; set; } = PatternflyDefaults.IconLibrary;
    [Parameter] public bool Inline { get; set; }
    [Parameter] public string? Title { get; set; } = null;
    [Parameter] public string? Description { get; set; } = null;
    [Parameter] public RenderFragment? Body { get; set; } = null;
    [Parameter] public RenderFragment? Actions { get; set; }
    [Parameter] public bool Closed { get; set; } = false;
    [Parameter] public bool Dismissable { get; set; } = true;
    [Parameter] public EventCallback OnDismiss { get; set; }

    protected async Task CloseAlert()
    {
        Closed = true;
        if (OnDismiss.HasDelegate)
            await OnDismiss.InvokeAsync();
        await this.InvokeAsync(StateHasChanged);
    }
    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>();
        classes.Add("pf-v5-c-alert");
        switch (Color)
        {
            case AlertColor.Info: classes.Add("pf-m-info"); break;
            case AlertColor.Success: classes.Add("pf-m-success"); break;
            case AlertColor.Warning: classes.Add("pf-m-warning"); break;
            case AlertColor.Danger: classes.Add("pf-m-danger"); break;
            case AlertColor.Default:
            default: break;
        }
        if (Inline)
        {
            classes.Add("pf-m-inline");
        }

        return classes;

    }
}
