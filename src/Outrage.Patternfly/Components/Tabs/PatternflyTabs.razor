@using Outrage.Patternfly.Components.Utilities
@inherits Patternfly.Components.Base.PatternflyComponentBase

@namespace Outrage.Patternfly.Components.Tabs

<nav class="@Classes" @attributes="AdditionalAttributes">
  <button class="pf-c-tabs__scroll-button" disabled aria-hidden="true" aria-label="Scroll left"> 
    <Icon Name="@IconLeft" Library="@IconLibrary" Weight="@IconWeight" />
  </button>

  <CascadingValue Value="@this">
    <ul class="pf-c-tabs__list">
        @ChildContent        
    </ul>
  </CascadingValue>
  
  <button class="pf-c-tabs__scroll-button" disabled aria-hidden="true" aria-label="Scroll right" >
    <Icon Name="@IconRight" Library="@IconLibrary" Weight="@IconWeight" />
  </button>
</nav>

<section class="pf-c-tab-content @(ActiveTab?.PanelCssClass)" role="tabpanel" tabindex="0" id="@(ActiveTab?.TabId)_panel">
  <div class="pf-c-tab-content__body">@(ActiveTab?.ChildContent)</div>
</section>


@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<string> OnTabSelected { get; set; }
    [Parameter] public Icon.LibraryEnum IconLibrary { get; set; } = Icon.LibraryEnum.fontawesome;
    [Parameter] public Icon.WeightEnum IconWeight { get; set; } = Icon.WeightEnum.solid;
    [Parameter] public string IconLeft { get; set; } = "angle-right";
    [Parameter] public string IconRight { get; set; } = "angle-left";
    public ITab? ActiveTab { get; private set; }

    private List<ITab> tabs = new List<ITab>();

    public async Task AddTab(ITab tab)
    {
        if (ActiveTab is null)
        {
            await SetActiveTab(tab);
        }
        tabs.Add(tab);
    }

    public async Task SetActiveTab(ITab tab)
    {
        if (ActiveTab != tab && tab != null)
        {
            ActiveTab = tab;
            StateHasChanged();
            if (OnTabSelected.HasDelegate)
                await OnTabSelected.InvokeAsync(tab.TabId);
        }
    }

    public async Task SetActiveTab(string? tabId)
    {
        ITab? tab = null;
        if (!string.IsNullOrEmpty(tabId))
            tab = tabs.SingleOrDefault(t => t.TabId == tabId);
        await SetActiveTab(tab ?? tabs.First());
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        return new string[] { "pf-c-tabs" };
    }
}
