@using System.Diagnostics.CodeAnalysis
@using Microsoft.AspNetCore.Components.Forms;
@using Outrage.Patternfly.Components.Form
@inherits InputBase<DateOnly?>
<input @attributes="@AdditionalAttributes" @bind-value="CurrentValueAsString" @bind-value:event="@(BindEvent)" />
@code {
    [CascadingParameter(Name = "FieldName")]
    public string? FieldName { get; set; }

    [Parameter]
    public bool BindOnInput { get; set; } = false;

    protected string BindEvent => BindOnInput ? "oninput" : "onchange";

    protected override void OnParametersSet()
    {
        this.AdditionalAttributes = FormHelpers.PatternflyAugment(AdditionalAttributes, "pf-c-form-control", this.FieldName, (a) =>
        {
            a["type"] = "date";
        }
        ) ?? null;
        base.OnParametersSet();
    }

    protected override string FormatValueAsString(DateOnly? value)
    {
        return value?.ToString("yyyy-MM-dd") ?? String.Empty;
    }

    protected override bool TryParseValueFromString(string value, [MaybeNullWhen(false)] out DateOnly? result, [NotNullWhen(false)] out string validationErrorMessage)
    {
        validationErrorMessage = null;

        if (String.IsNullOrWhiteSpace(value)) {
            validationErrorMessage = $"Input string was empty.";
            result = null;
            return false;
        }

        if (!DateOnly.TryParse(value, out var dt))
        {
            validationErrorMessage = $"Could not parse a date from {value}.";
            result = null;
            return false;
        }

        result = dt;
        return true;
    }
}
