@using Microsoft.AspNetCore.Components.Forms;
@using System.Globalization;
@inherits InputNumber<TValue>
@typeparam TValue

<span class="pf-v5-c-form-control @(ReadOnly ? "pf-m-readonly" : string.Empty)">
    <input @attributes="@AdditionalAttributes" @bind-value="CurrentValueAsString" @bind-value:event="@(BindEvent)" />
</span>

@code {
    [CascadingParameter(Name = "FieldName")]
    public string? FieldName { get; set; }

    [Parameter]
    public bool BindOnInput { get; set; } = false;

    [Parameter]
    public int DecimalPlaces { get; set; } = 0;

    [Parameter]
    public bool ZeroPadDecimals { get; set; } = false;

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    protected string BindEvent => BindOnInput ? "oninput" : "onchange";

    protected override void OnParametersSet()
    {
        this.AdditionalAttributes = FormHelpers.PatternflyAugment(AdditionalAttributes, "", this.FieldName, (a) =>
        {
            if (!a.ContainsKey("type"))
                a["type"] = "number";
            if (ReadOnly) a["readonly"] = "readonly";
        }) ?? null;
        base.OnParametersSet();
    }

    protected override string? FormatValueAsString(TValue? value)
    {
        // Avoiding a cast to IFormattable to avoid boxing.
        switch (value)
        {
            case null:
                return null;

            case int @int:
                return (@int).ToString("D");

            case long @long:
                return (@long).ToString("D");

            case short @short:
                return (@short).ToString($"F{(ZeroPadDecimals ? "0" : string.Empty)}{DecimalPlaces}");

            case float @float:
                return (@float).ToString($"F{(ZeroPadDecimals ? "0" : string.Empty)}{DecimalPlaces}");

            case double @double:
                return (@double).ToString($"F{(ZeroPadDecimals ? "0" : string.Empty)}{DecimalPlaces}");

            case decimal @decimal:
                return (@decimal).ToString($"F{(ZeroPadDecimals ? "0" : string.Empty)}{DecimalPlaces}");

            default:
                throw new InvalidOperationException($"Unsupported type {value.GetType()}");
        }
    }
}
