<PatternflyInputSelect @attributes="AdditionalAttributes" Value="@this.StringValue" ValueExpression="@(() => this.StringValue)" ValueChanged="@(async (string value) => { await MapBoundValue(value); })">
    <option value="True">@WhenTrue</option>
    <option value="False">@WhenFalse</option>
</PatternflyInputSelect>

@code {
    string StringValue { get; set; } = String.Empty;

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment WhenTrue { get; set; } = default!;

    [Parameter]
    public RenderFragment WhenFalse { get; set; } = default!;

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; } = default!;

    protected override void OnInitialized()
    {
        this.StringValue = Value.ToString();
        base.OnInitialized();
    }

    public async Task MapBoundValue(string stringValue)
    {
        this.StringValue = stringValue;
        this.Value = bool.Parse(stringValue);
        await ValueChanged.InvokeAsync(this.Value);
    }
}
