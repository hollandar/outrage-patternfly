@inherits Patternfly.Components.Base.PatternflyComponentBase
@using Outrage.Patternfly.Interfaces
@using Outrage.Patternfly.Components.Utilities
@implements ICloseOnClick

<CascadingValue Name="@nameof(ICloseOnClick)" Value="this">
    <div class="@Classes" @attributes="AdditionalAttributes">
        <button class="@DropdownButtonClass"
                id="@dropdownId"
                aria-expanded="@Expanded"
                type="button"
                aria-label="Actions"
                @onclick="ToggleDropdown" @onclick:stopPropagation>
            @if (Style == DropdownStyle.regular)
            {
                <span class="pf-v5-c-dropdown__toggle-text">@Text</span>
                <span class="pf-v5-c-dropdown__toggle-icon">
                    <Icon Name="@IconCaretDown" Library="@IconLibrary" Weight="@IconWeight" />
                </span>
            }
            @if (Style == DropdownStyle.kebab)
            {
                <Icon Name="@IconElipsis" Library="@IconLibrary" Weight="@IconWeight" />
            }
        </button>
        <div class="pf-v5-c-menu" aria-labelledby="@dropdownId" style="@(AlignRight ? "right:0;" : string.Empty)" hidden="@(!Expanded)">
            <div class="pf-v5-c-menu__content">
                @if (IsGrouped)
                {
                    @ChildContent
                }
                else
                {
                    <ul class="pf-v5-c-menu__list" role="menu">
                        @ChildContent
                    </ul>
                }
            </div>
        </div>
    </div>
</CascadingValue>

@code {
    [Parameter]
    public bool Expanded { get; set; } = false;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public DropdownStyle Style { get; set; } = DropdownStyle.regular;

    [Parameter]
    public bool AlignRight { get; set; }

    [Parameter]
    public bool IsGrouped { get; set; }

    [Parameter]
    public bool Scrollable { get; set; }

    [Parameter] public LibraryEnum IconLibrary { get; set; } = PatternflyDefaults.IconLibrary;
    [Parameter] public WeightEnum IconWeight { get; set; } = PatternflyDefaults.IconWeight;
    [Parameter] public string IconCaretDown { get; set; } = "caret-down";
    [Parameter] public string IconElipsis { get; set; } = "ellipsis-v";

    [Parameter] public EventCallback DroppedDown { get; set; }

    public string DropdownButtonClass
    {
        get
        {
            return Style switch
            {
                DropdownStyle.regular => "pf-v5-c-dropdown__toggle",
                DropdownStyle.kebab => "pf-v5-c-dropdown__toggle pf-m-plain",
                _ => string.Empty
            };
        }
    }

    [Parameter]
    public string Text { get; set; } = "Actions";

    HtmlId dropdownId = new HtmlId();

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-v5-c-dropdown" });
        if (Expanded)
        {
            classes.Add("pf-m-expanded");
        }

        if (Scrollable)
        {
            classes.Add("pf-m-scrollable");
        }

        return classes;
    }

    void ToggleDropdown()
    {
        this.Expanded = !this.Expanded;
        if (this.Expanded) DroppedDown.InvokeAsync();

        this.StateHasChanged();
    }

    public async Task CloseAsync()
    {
        this.Expanded = false;
        await this.InvokeAsync(StateHasChanged);
    }
}
