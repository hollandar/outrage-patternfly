@inherits Patternfly.Components.Base.PatternflyComponentBase
@using Outrage.Patternfly.Components.Utilities

<li class="@Classes" @attributes="AdditionalAttributes">
    <button class="pf-v5-c-nav__link"
            id="@controlsId"
            aria-expanded="@Expanded"
            @onclick="ToggleExpanded">
        @if (Icon != null)
        {
            <span><Icon Name="@Icon" Library="@IconLibrary" Weight="@IconWeight" FixedWidth="true" class="pf-v5-u-mr-sm" aria-hidden="true" /></span>
        }
        @if (Text != null)
        {
            <span>@Text</span>
        }
        <span class="pf-v5-c-nav__toggle">
            <span class="pf-v5-c-nav__toggle-icon">
                @if (Expanded)
                {
                    <span><Icon Name="@IconExpanded" Library="@IconLibrary" Weight="@IconWeight" FixedWidth="true" aria-hidden="true"/></span>
                } else
                {
                    <span><Icon Name="@IconCollapsed" Library="@IconLibrary" Weight="@IconWeight"/></span>
                }
            </span>
        </span>
    </button>
    <section class="pf-v5-c-nav__subnav"
             aria-labelledby="@controlsId"
             hidden="@(!Expanded)">
        <ul class="pf-v5-c-nav__list">
            @ChildContent
        </ul>
    </section>
</li>

@code {
    HtmlId controlsId = new();
    [Parameter] public string? Text { get; set; } = null;
    [Parameter] public string? Icon { get; set; } = null;
    [Parameter] public string? IconExpanded { get; set; } = "angle-right";
    [Parameter] public string? IconCollapsed { get; set; } = "angle-right";
    [Parameter] public WeightEnum IconWeight { get; set; } = WeightEnum.solid;
    [Parameter] public LibraryEnum IconLibrary { get; set; } = LibraryEnum.fontawesome;
    [Parameter] public RenderFragment? ChildContent { get; set; } = null;
    [Parameter] public bool Expanded { get; set; } = false;
    [Parameter] public EventCallback<bool> OnExpanded { get; set; }

    protected override void OnInitialized()
    {
        controlsId = new HtmlId();
        base.OnInitialized();
    }

    async Task ToggleExpanded()
    {
        this.Expanded = !this.Expanded;
        if (this.Expanded)
        {
            await OnExpanded.InvokeAsync(Expanded);
        }
        await this.InvokeAsync(this.StateHasChanged);
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-v5-c-nav__item", "pf-m-expandable" });
        if (this.Expanded)
            classes.Add("pf-m-expanded");

        return classes;
    }
}
