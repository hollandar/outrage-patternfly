@using Outrage.Patternfly.Components.Button
@using Outrage.Patternfly.Components.Utilities

@inherits Outrage.Patternfly.Components.Base.PatternflyComponentBase

<span class="@Classes" @attributes="AdditionalAttributes" style="--pf-v5-c-label--BackgroundColor: @(CustomColor != null?CustomColor: String.Empty)">
    <span class="pf-v5-c-label__content">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <span class="pf-v5-c-label__icon">
                <Icon Name="@Icon" Weight="@IconWeight" Library="@IconLibrary" aria-hidden="true" />
            </span>
        }
        @if (Clicked.HasDelegate)
        {
            <a class="pf-v5-c-label__text" href="javascript:void(0)" @onclick="ClickLabel" @onclick:preventDefault @onclick:stopPropagation>@Text</a>
        }
        else
        {
            <span class="pf-v5-c-label__text">@Text</span>
        }
    </span>
    @if (Closed.HasDelegate)
    {
        <span class="pf-v5-c-label__actions">
            <PatternflyButton Color="ButtonColor.Plain"
                              Icon="times"
                              type="button"
                              aria-label="Remove"
                              Clicked="CloseLabel">
            </PatternflyButton>
        </span>
    }
</span>

@code {
    [Parameter] public LabelColor Color { get; set; } = LabelColor.Default;
    [Parameter] public string? Icon { get; set; } = null;
    [Parameter] public WeightEnum IconWeight { get; set; } = WeightEnum.solid;
    [Parameter] public LibraryEnum IconLibrary { get; set; } = LibraryEnum.fontawesome;
    [Parameter] public string? Text { get; set; } = null;
    [Parameter] public bool Compact { get; set; } = false;
    [Parameter] public bool Outline { get; set; } = false;
    [Parameter] public string? CustomColor { get; set; } = null;
    [Parameter] public EventCallback<string> Closed { get; set; }
    [Parameter] public EventCallback<string> Clicked { get; set; }

    protected async Task CloseLabel(MouseEventArgs args)
    {
        await this.Closed.InvokeAsync(this.Text);
    }

    protected async Task ClickLabel(MouseEventArgs args)
    {
        await this.Clicked.InvokeAsync(this.Text);
    }
    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>();
        classes.Add("pf-v5-c-label");
        switch (Color)
        {
            case LabelColor.Blue: classes.Add("pf-m-blue"); break;
            case LabelColor.Green: classes.Add("pf-m-green"); break;
            case LabelColor.Orange: classes.Add("pf-m-orange"); break;
            case LabelColor.Red: classes.Add("pf-m-red"); break;
            case LabelColor.Purple: classes.Add("pf-m-purple"); break;
            case LabelColor.Cyan: classes.Add("pf-m-cyan"); break;
            case LabelColor.Default:
            case LabelColor.Gray:
            default: break;
        }

        if (Compact)
        {
            classes.Add("pf-m-compact");
        }
        if (Outline)
        {
            classes.Add("pf-m-outline");
        }
        return classes;

    }
}
