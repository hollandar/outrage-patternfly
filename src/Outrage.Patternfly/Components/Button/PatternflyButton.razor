@using Outrage.Patternfly.Components.Utilities
@using Outrage.Patternfly.Components.Dropdown
@using Outrage.Patternfly.Interfaces
@inherits Patternfly.Components.Base.PatternflyComponentBase

<button class="@Classes" @onclick="OnClicked" @onclick:stopPropagation type="@Type" @attributes="AdditionalAttributes">
    @if (ChildContent != null) {
        @if (Icon != null && IconPosition == IconPosition.Start)
        {
            <span class="pf-c-button__icon pf-m-start">
                <Icon Name="@Icon" Library="@IconLibrary" Weight="@IconWeight" Size="@IconSize" aria-hidden="true" />
            </span>
        }
        @ChildContent
        @if (Icon != null && IconPosition == IconPosition.End)
        {
            <span class="pf-c-button__icon pf-m-end">
                <Icon Name="@Icon" Library="@IconLibrary" Weight="@IconWeight" Size="@IconSize" aria-hidden="true" />
            </span>
        }
    }
    else {
        <Icon Name="@Icon" Library="@IconLibrary" Weight="@IconWeight" Size="@IconSize" aria-hidden="true" />
    }
</button>


@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public ButtonColor Color { get; set; } = ButtonColor.Primary;

    [Parameter]
    public Icon.LibraryEnum IconLibrary { get; set; } = Utilities.Icon.LibraryEnum.fontawesome;

    [Parameter]
    public string? Icon { get; set; } = null;

    [Parameter]
    public Icon.WeightEnum IconWeight { get; set; } = Utilities.Icon.WeightEnum.solid;

    [Parameter]
    public Icon.SizeEnum IconSize { get; set; } = Utilities.Icon.SizeEnum.regular;

    [Parameter]
    public IconPosition IconPosition { get; set; } = IconPosition.Start;

    [Parameter]
    public EventCallback<MouseEventArgs> Clicked { get; set; }

    [Parameter]
    public string? Href { get; set; } = null;

    [Inject]
    NavigationManager Nav { get; set; } = default!;

    [Parameter]
    public string Type { get; set; } = "button";

    [CascadingParameter(Name = nameof(ICloseOnClick))]
    public ICloseOnClick? Parent { get; set; } = null;

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        List<string> classes = new List<string>(new string[] { "pf-c-button" });

        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);

        switch (Color)
        {
            case ButtonColor.Plain:
                classes.Add("pf-m-plain");
                break;

            case ButtonColor.Primary:
                classes.Add("pf-m-primary");
                break;

            case ButtonColor.Secondary:
                classes.Add("pf-m-secondary");
                break;

            case ButtonColor.SecondaryDanger:
                classes.Add("pf-m-secondary pf-m-danger");
                break;

            case ButtonColor.Tertiary:
                classes.Add("pf-m-tertiary");
                break;

            case ButtonColor.Danger:
                classes.Add("pf-m-danger");
                break;

            case ButtonColor.Warning:
                classes.Add("pf-m-warning");
                break;

            case ButtonColor.Link:
                classes.Add("pf-m-link");
                break;

            case ButtonColor.InlineLink:
                classes.Add("pf-m-link pf-m-inline");
                break;

            case ButtonColor.LinkDanger:
                classes.Add("pf-m-link pf-m-danger");
                break;

            case ButtonColor.Control:
                classes.Add("pf-m-control");
                break;
        }

        if (!AdditionalAttributes?.ContainsKey("type") ?? false)
        {
            if (AdditionalAttributes == null)
                AdditionalAttributes = new Dictionary<string, object>();
            AdditionalAttributes["type"] = "button";
        }

        return classes;
    }

    private async Task OnClicked(MouseEventArgs e)
    {
        if (!String.IsNullOrWhiteSpace(Href))
        {
            Nav?.NavigateTo(Href);
        }
        else
        {
            await Clicked.InvokeAsync(e);
        }

        if (this.Parent != null)
            await this.Parent.CloseAsync();
    }
}
