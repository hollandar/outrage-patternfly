@inherits Patternfly.Components.Base.PatternflyComponentBase
@implements IAsyncDisposable
@inject IJSRuntime JS

<CascadingValue Name="Menu" Value="this">
    <div class="@Classes" @attributes="AdditionalAttributes">
        <div @ref="menuContentReference" class="pf-c-menu__content">
            <ul class="pf-c-menu__list">
                @ChildContent
            </ul>
        </div>
    </div>
</CascadingValue>

@code {
    IJSObjectReference module;
    ElementReference menuContentReference;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Scrollable { get; set; } = false;

    [Parameter]
    public int? MaxHeightPx { get; set; } = null;

    [Parameter]
    public MenuStyle MenuStyle { get; set; } = MenuStyle.Normal;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/Outrage.Patternfly/scripts/components/menu/PatternflyMenu.js");

        await base.OnAfterRenderAsync(firstRender);

        await module.InvokeVoidAsync("PatternflyMenu.resizeMenuContent", menuContentReference);
    }

    public bool IsDrilledIn
    {
        get
        {
            return this.items.Any(r => r.Expanded);
        }
    }

    private HashSet<PatternflyMenuItem> items = new();

    public void AddMenuItem(PatternflyMenuItem item)
    {
        this.items.Add(item);
    }

    public async Task ResetExpanded()
    {
        foreach (var item in items)
        {
            await item.ResetExpanded();
        }

        await this.InvokeAsync(StateHasChanged);
    }

    public async Task InvokeStateHasChanged()
    {
        await this.InvokeAsync(StateHasChanged);
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-c-menu" });
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
        if (Scrollable)
            classes.Add("pf-m-scrollable");
        if (MenuStyle == MenuStyle.Flyout)
            classes.Add("pf-m-flyout");
        if (MenuStyle == MenuStyle.DrillDown)
        {
            classes.Add("pf-m-drilldown");
            if (IsDrilledIn)
                classes.Add("pf-m-drilled-in");
        }

        return classes;
    }

    public override Dictionary<string, object> DeriveAdditionalAttributes(Dictionary<string, object> additionalAttributes)
    {
        if (Scrollable && MaxHeightPx != null)
            additionalAttributes["style"] = $"--pf-c-menu__content--MaxHeight: {MaxHeightPx}px;";

        return base.DeriveAdditionalAttributes(additionalAttributes);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module != null)
            await module.DisposeAsync();
    }
}
