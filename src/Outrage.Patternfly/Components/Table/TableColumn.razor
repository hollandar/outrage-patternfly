@using Microsoft.Extensions.DependencyInjection;
@using Outrage.EventBus;
@using Outrage.Patternfly.Components.Utilities;

@namespace Outrage.Patternfly.Components.Table

@inherits Outrage.Patternfly.Components.Base.PatternflyComponentBase

<th role="columnheader" scope="col" class="@Classes" @attributes="AdditionalAttributes" aria-sort="@(SortOrder.ToString().ToLower())">
    @if (this.Sortable)
    {
        <button class="pf-v5-c-table__button" @onclick="_clicked">
            <div class="pf-v5-c-table__button-content">
                <span class="pf-v5-c-table__text">
                    @ChildContent
                    @Title
                </span>
                @if (Sortable)
                {
                    <span class="pf-v5-c-table__sort-indicator">
                        @if (Parent?.SortBy == this.SortBy)
                        {
                            if (SortOrder == Outrage.Patternfly.Components.Table.SortOrder.Ascending)
                            {
                                <Icon Library="@IconLibrary" Weight="@IconWeight" Name="@SortIconAscending"></Icon>
                            }
                            else if (SortOrder == Outrage.Patternfly.Components.Table.SortOrder.Descending)
                            {
                                <Icon Library="@IconLibrary" Weight="@IconWeight" Name="@SortIconDescending"></Icon>
                            }
                        }
                        else
                        {
                            <Icon Library="@IconLibrary" Weight="@IconWeight" Name="arrows-alt-v"></Icon>
                        }
                    </span>
                }
            </div>
        </button>
    }
    else
    {
        @ChildContent
        @Title
    }
</th>


@code {
    [Inject] IServiceProvider ServiceProvider { get; set; } = default!;

    [CascadingParameter(Name = "Parent")]
    public IPatternflyTable? Parent { get; set; }

    [Parameter]
    public LibraryEnum IconLibrary { get; set; } = LibraryEnum.fontawesome;

    [Parameter]
    public WeightEnum IconWeight { get; set; } = WeightEnum.solid;

    [Parameter]
    public SizeEnum IconSize { get; set; } = SizeEnum.regular;

    [Parameter]
    public string? SortIconAscending { get; set; } = "long-arrow-alt-up";

    [Parameter]
    public string? SortIconDescending { get; set; } = "long-arrow-alt-down";

    [Parameter]
    public string? SortIconUnselected { get; set; } = "arrows-alt-v";

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public RenderFragment? ChildContent { get; set; } = null;

    [Parameter]
    public bool Sortable { get; set; } = false;

    [Parameter]
    public string SortBy { get; set; } = string.Empty;

    [Parameter]
    public SortOrder SortOrder { get; set; } = SortOrder.Ascending;

    [Parameter]
    public bool CanToggleSortOrder { get; set; } = true;

    [Parameter]
    public Func<string, Outrage.Patternfly.Components.Table.SortOrder, Task>? Changed { get; set; }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>();
        classes.Add("pf-v5-c-table__th");
        if (Sortable) classes.Add("pf-v5-c-table__sort");
        if (Parent?.SortBy == SortBy) classes.Add("pf-m-selected");
        return classes;
    }

    async void _clicked()
    {
        if (this.Sortable)
        {
            if (CanToggleSortOrder)
            {
                if (Parent?.SortBy == this.SortBy)
                    this.SortOrder = this.SortOrder == SortOrder.Ascending ? SortOrder.Descending : SortOrder.Ascending;
                else
                    this.SortOrder = SortOrder.Ascending;
            }

            if (Parent != null) await InvokeAsync(() => Parent.SelectSortAsync(this.SortBy, this.SortOrder));
            if (Changed != null) await Changed.Invoke(this.SortBy, this.SortOrder);
        }
    }
}
