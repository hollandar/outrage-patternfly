@using Microsoft.AspNetCore.Components.Web;
@using Outrage.Patternfly.Components.Table;
@using Outrage.Patternfly.Models
@using Outrage.Patternfly.Services
@using Outrage.Patternfly.Components.Pagination;

@inherits Patternfly.Components.Base.PatternflyComponentBase

@typeparam TItem
@typeparam TItemKey

<CascadingValue Name="Parent" Value="@this">
    <table class="@Classes" @attributes="AdditionalAttributes" role="grid" aria-label="@(Label ?? "")">
        @if (this.Columns != null)
        {
            <thead>
                <tr role="row">
                    @this.Columns
                </tr>
            </thead>
        }

        <tbody role="rowgroup">
            @foreach (var row in WrappedItems ?? Enumerable.Empty<DataItemWrapperModel<TItem>>())
            {
                <tr role="row" 
                    class="@(UseSelection && row.IsSelected ? "pf-m-selected" : "") @(OnRowClicked.HasDelegate ? "pf-m-hoverable":"")" 
                    @key="row" 
                    @onclick="@(async (e)=> { await RowClicked(e, row);})">
                    @if (RowTemplate != null)
                    {
                        @RowTemplate(row.Item)
                    } else
                    {
                        <td>RowTemplate is required</td>
                    }
                </tr>
            }
        </tbody>
    </table>
    @if (WrappedItems != null && !WrappedItems.Any())
    {
        <div class="ou-not-found">
            @if (NoItemsMessage != null)
            {
                @NoItemsMessage
            }
            else
            {
                <span>No records found.</span>
            }
        </div>
    }
</CascadingValue>

@code {
    [Parameter] public bool Compact { get; set; }

    [Parameter] public bool Striped { get; set; }

    [Parameter] public TableFallbackPoint Fallback { get; set; } = TableFallbackPoint.Medium;

    [Parameter] public string? Label { get; set; } = null;

    [Parameter] public RenderFragment? Columns { get; set; }

    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }

    [Parameter] public RenderFragment? NoItemsMessage { get; set; }

    [Parameter] public IEnumerable<DataItemWrapperModel<TItem>>? WrappedItems { get; set; }

    [Parameter] public IEnumerable<TItem>? Items
    {
        get => WrappedItems?.Select(r => r.Item);
        set => WrappedItems = value?.Select(r => new DataItemWrapperModel<TItem>(r));
    }

    [Parameter] public EventCallback<DataItemWrapperModel<TItem>> OnRowClicked { get; set; }

    [Parameter] public bool UseSelection { get; set; } = true;

    public bool HasSelection {get { return this.WrappedItems?.Any(r => r.IsSelected) ?? false; }}


    public async Task RowClicked(MouseEventArgs args, DataItemWrapperModel<TItem> wrapper)
    {
        if (OnRowClicked.HasDelegate)
        {
            foreach (var row in this.WrappedItems ?? Enumerable.Empty<DataItemWrapperModel<TItem>>())
            {
                row.IsSelected = row == wrapper;
            }
            await OnRowClicked.InvokeAsync(wrapper);
            this.StateHasChanged();
        }
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-c-table" });
        switch (Fallback)
        {
            case TableFallbackPoint.Custom: classes.Add("pf-m-grid"); break;
            case TableFallbackPoint.Medium: classes.Add("pf-m-grid-md"); break;
            case TableFallbackPoint.Large: classes.Add("pf-m-grid-lg"); break;
            case TableFallbackPoint.XLarge: classes.Add("pf-m-grid-xl"); break;
            case TableFallbackPoint.XXLarge: classes.Add("pf-m-grid-2xl"); break;
        }
        if (Compact)
        {
            classes.Add("pf-m-compact");
        }
        if (Striped)
        {
            classes.Add("pf-m-striped");
        }
        return classes;
    }
}
