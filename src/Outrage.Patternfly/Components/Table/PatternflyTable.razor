@using Microsoft.AspNetCore.Components.Web
@using Outrage.Patternfly.Components.Table
@using Outrage.Patternfly.Models
@using Outrage.Patternfly.Services
@using Outrage.Patternfly.Components.Pagination

@namespace Outrage.Patternfly.Components.Table

@inherits Outrage.Patternfly.Components.Base.PatternflyComponentBase
@implements IPatternflyTable

@typeparam TItem
@typeparam TItemKey

<CascadingValue Name="Parent" Value="@this">
    <table class="@Classes" @attributes="AdditionalAttributes" role="grid" aria-label="@(Label ?? "")">
        @if (this.Columns != null)
        {
            <thead class="pf-v5-c-table__thead">
                <tr class="pf-v5-c-table__tr" role="row">
                    @this.Columns
                </tr>
            </thead>
        }

        <tbody class="pf-v5-c-table__tbody" role="rowgroup">
            @foreach (var row in WrappedItems ?? Enumerable.Empty<DataItemWrapperModel<TItem>>())
            {
                if (OnRowClicked.HasDelegate)
                {
                    <tr class="pf-v5-c-table__tr" @key="@(RowId != null ? RowId(row.Item) : row)" @attributes="GetRowAttributes(row)"
                            @onclick="@(async (MouseEventArgs e) => await RowClicked(e, row))">
                        @if (RowTemplate != null)
                        {
                            @RowTemplate(row.Item)
                        }
                        else
                        {
                            <td class ="pf-v5-c-table__td">RowTemplate is required</td>
                        }
                    </tr>
                }
                else
                {
                    <tr class="pf-v5-c-table__tr" @key="@(RowId != null ? RowId(row.Item) : row)" @attributes="GetRowAttributes(row)">
                        @if (RowTemplate != null)
                        {
                            @RowTemplate(row.Item)
                        }
                        else
                        {
                            <td>RowTemplate is required</td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    @if (!(WrappedItems?.Any() ?? false))
    {
        <div class="ou-not-found">
            @if (NoItemsMessage != null)
            {
                @NoItemsMessage
            }
            else
            {
                <span>No records found.</span>
            }
        </div>
    }
</CascadingValue>

@code {
    [Parameter] public bool Compact { get; set; }

    [Parameter] public bool Striped { get; set; }

    [Parameter] public TableFallbackPoint Fallback { get; set; } = TableFallbackPoint.Medium;

    [Parameter] public string? Label { get; set; } = null;

    [Parameter] public RenderFragment? Columns { get; set; }

    [Parameter] public string? SortBy { get; set; }

    [Parameter] public SortOrder SortOrder { get; set; }

    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }

    [Parameter] public RenderFragment? NoItemsMessage { get; set; }

    [Parameter] public IEnumerable<DataItemWrapperModel<TItem>>? WrappedItems { get; set; }

    [Parameter] public IEnumerable<TItem>? Items
    {
        get => WrappedItems?.Select(r => r.Item);
        set => WrappedItems = value?.Select(r => new DataItemWrapperModel<TItem>(r));
    }

    [Parameter] public EventCallback<DataItemWrapperModel<TItem>> OnRowClicked { get; set; }

    [Parameter] public Func<TItem, object>? RowId { get; set; }

    [Parameter] public bool UseSelection { get; set; } = true;

    [Parameter] public Func<string, SortOrder, Task>? OnSortBy { get; set; }

    public bool HasSelection {get { return this.WrappedItems?.Any(r => r.IsSelected) ?? false; }}

    public Dictionary<string, object> GetRowAttributes(DataItemWrapperModel<TItem> row)
    {
        var attributes = new Dictionary<string, object>();
        attributes.Add("role", "row");

        var classes = new HashSet<string>();
        if (UseSelection && row.IsSelected) classes.Add("pf-m-selected");
        if (OnRowClicked.HasDelegate) classes.Add("pf-m-hoverable");
        if (classes.Any()) attributes.Add("class", string.Join(' ', classes));
        if (RowId != null) attributes.Add("id", $"_{RowId(row.Item).ToString()}");

        return attributes;
    }

    public async Task RowClicked(MouseEventArgs args, DataItemWrapperModel<TItem> wrapper)
    {
        if (OnRowClicked.HasDelegate)
        {
            foreach (var row in this.WrappedItems ?? Enumerable.Empty<DataItemWrapperModel<TItem>>())
            {
                row.IsSelected = row == wrapper;
            }
            await OnRowClicked.InvokeAsync(wrapper);
            this.StateHasChanged();
        }
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-v5-c-table" });
        switch (Fallback)
        {
            case TableFallbackPoint.Custom: classes.Add("pf-m-grid"); break;
            case TableFallbackPoint.Medium: classes.Add("pf-m-grid-md"); break;
            case TableFallbackPoint.Large: classes.Add("pf-m-grid-lg"); break;
            case TableFallbackPoint.XLarge: classes.Add("pf-m-grid-xl"); break;
            case TableFallbackPoint.XXLarge: classes.Add("pf-m-grid-2xl"); break;
        }
        if (Compact)
        {
            classes.Add("pf-m-compact");
        }
        if (Striped)
        {
            classes.Add("pf-m-striped");
        }
        return classes;
    }

    public async Task SelectSortAsync(string sortBy, SortOrder sortOrder)
    {
        if (SortBy != sortBy)
        {
            SortBy = sortBy;
        }
        if (SortOrder != sortOrder)
        {
            SortOrder = sortOrder;
        }

        if (OnSortBy != null) await OnSortBy.Invoke(sortBy, sortOrder);

        await InvokeAsync(StateHasChanged);
    }
}
