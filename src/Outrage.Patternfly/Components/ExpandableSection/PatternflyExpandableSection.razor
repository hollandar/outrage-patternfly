@using Outrage.Patternfly.Components.Utilities
@inherits Outrage.Patternfly.Components.Base.PatternflyComponentBase

<div class="@Classes" @attributes="AdditionalAttributes">
  <button
    type="button"
    class="pf-c-expandable-section__toggle"
    aria-expanded="@Expanded"
    @onclick="ToggleExpanded"
  >
    <span class="pf-c-expandable-section__toggle-icon">
      <Icon Name="@IconExpand" Library="@IconLibrary" Weight="@IconWeight" />
    </span>
    <span class="pf-c-expandable-section__toggle-text">@(Expanded?ShowLess:ShowMore)</span>
  </button>
  <div
    class="pf-c-expandable-section__content"
    hidden="@(!Expanded)"
  >@ChildContent</div>
</div>

@code {
    [Parameter]
    public bool Expanded { get; set; } = false;

    [Parameter]
    public string ShowMore { get; set; } = "Show more";

    [Parameter]
    public string ShowLess { get; set; } = "Show less";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

        [Parameter] public Icon.LibraryEnum IconLibrary { get; set; } = Icon.LibraryEnum.fontawesome;
    [Parameter] public Icon.WeightEnum IconWeight { get; set; } = Icon.WeightEnum.solid;
    [Parameter] public string IconExpand { get; set; } = "angle-right";

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>();
        classes.Add("pf-c-expandable-section");
        if (Expanded) classes.Add("pf-m-expanded");
        return classes;
    }

    public async Task ToggleExpanded()
    {
        this.Expanded = !this.Expanded;
        await this.InvokeAsync(this.StateHasChanged);
    }
}