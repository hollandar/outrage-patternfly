@inherits Outrage.Patternfly.Components.Base.PatternflyComponentBase
@using Outrage.Patternfly.Components.Utilities;

<li class="@Classes" @attributes="AdditionalAttributes"
    role="treeitem"
    aria-expanded="@Expanded"
    tabindex="0">
    <div class="pf-c-tree-view__content @dropClass"
         draggable="@(OnDragStart.HasDelegate?"true": "false")"
         @ondragstart="DragStart"
         ondragover="event.preventDefault();"
         @ondragenter="DragEnter"
         @ondragleave="DragLeave"
         @ondrop="Drop">

        <button class="pf-c-tree-view__node" @onclick="ToggleExpanded">
            <div class="pf-c-tree-view__node-container">
                @if (Children != null)
                {
                    <div class="pf-c-tree-view__node-toggle">
                        <span class="pf-c-tree-view__node-toggle-icon">
                            @if (Expanded)
                            {
                                <Icon Name="angle-down" />
                            }
                            else
                            {
                                <Icon Name="angle-right" />
                            }
                        </span>
                    </div>
                }
                <span class="pf-c-tree-view__node-icon">
                    @if (Expanded)
                    {
                        <Icon Name="@IconOpen" />
                    }
                    else
                    {
                        <Icon Name="@Icon" />
                    }
                </span>
                <span class="pf-c-tree-view__node-text">
                    @Text
                </span>
            </div>
        </button>
        @if (Action != null)
        {
            <div class="pf-c-tree-view__action">
                @Action
            </div>
        }
    </div>
    @if (Children != null && Expanded)
    {
        <ul class="pf-c-tree-view__list" role="group">
            @Children
        </ul>
    }
</li>

@code {
    string dropClass = "";
    [Parameter] public bool Expanded { get; set; } = false;
    [Parameter] public EventCallback<bool> ExpandedChanged { get; set; }
    [Parameter] public RenderFragment? Text { get; set; }
    [Parameter] public RenderFragment? Children { get; set; }
    [Parameter] public RenderFragment? Action { get; set; }
    [Parameter] public string Icon { get; set; } = "folder";
    [Parameter] public string IconOpen { get; set; } = "folder-open";
    [Parameter] public EventCallback<MouseEventArgs> Clicked { get; set; }
    [Parameter] public EventCallback OnExpanded { get; set; }
    [Parameter] public EventCallback OnCollapsed { get; set; }
    [Parameter] public EventCallback OnDragStart { get; set; }
    [Parameter] public EventCallback OnDrop { get; set; }
    [Parameter] public EventCallback OnDragEnter { get; set; }
    [Parameter] public EventCallback OnDragLeave { get; set; }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-c-tree-view__list-item" });
        if (Expanded)
            classes.Add("pf-m-expanded");

        return classes;
    }

    protected async Task ToggleExpanded(MouseEventArgs args)
    {

        if (Expanded == true)
            await this.OnCollapsed.InvokeAsync();
        else
            await this.OnExpanded.InvokeAsync();

        if (Children == null)
        {
            var wasExpanded = Expanded;
            Expanded = false;
            if (wasExpanded)
                await this.ExpandedChanged.InvokeAsync();

            await this.Clicked.InvokeAsync(args);
        }
        else
        {
            this.Expanded = !this.Expanded;
            await this.ExpandedChanged.InvokeAsync(this.Expanded);
        }

        await this.InvokeAsync(StateHasChanged);
    }

    public async Task DragStart()
    {
        await this.OnDragStart.InvokeAsync();
    }

    public async Task Drop()
    {
        await this.OnDrop.InvokeAsync();
    }

    public async Task DragEnter()
    {
        dropClass = "ou-drop-target";
        await this.OnDragEnter.InvokeAsync();
    }

    public async Task DragLeave()
    {
        dropClass = "";
        await this.OnDragLeave.InvokeAsync();
    }
}
