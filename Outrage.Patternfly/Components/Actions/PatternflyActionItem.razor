@inherits Patternfly.Components.Base.PatternflyComponentBase

@using Outrage.Patternfly.Components.Button
@using Outrage.Patternfly.Components.Utilities

@typeparam TItem
<div class="@Classes" @attributes="AdditionalAttributes">
    <PatternflyButton Color="@Color" Icon="@Icon" IconLibrary="@IconLibrary" IconWeight="@IconWeight" IconPosition="@IconPosition" Clicked="ActionClicked">
        @ChildContent
    </PatternflyButton>
</div>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public ButtonColor Color { get; set; } = ButtonColor.Primary;

    [Parameter] 
    public string? Icon { get; set; } = null;

    [Parameter]
    public Icon.LibraryEnum IconLibrary { get; set; } = Utilities.Icon.LibraryEnum.fontawesome;

    [Parameter] 
    public IconPosition IconPosition { get; set; } = IconPosition.Start;

    [Parameter]
    public Icon.WeightEnum IconWeight { get; set; } = Utilities.Icon.WeightEnum.regular;

    [Parameter]
    public TItem? Item { get; set; }

    [Parameter]
    public EventCallback<ItemEventArgs<TItem>> Clicked { get; set; }

    async Task ActionClicked(MouseEventArgs e)
    {
        await this.Clicked.InvokeAsync(new ItemEventArgs<TItem>(e, this.Item));
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        return new string[] { "pf-c-action-list__item" };
    }

}
