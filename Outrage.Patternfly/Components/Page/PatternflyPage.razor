@using Outrage.Patternfly.Components.Button
@inherits Patternfly.Components.Base.PatternflyComponentBase
@inject NavigationManager Nav

<div class="@Classes" @attributes="AdditionalAttributes">
    <header class="pf-c-page__header" role="banner">
        <div class="pf-c-page__header-brand">
            <div class="pf-l-split pf-m-gutter">
            @if (Toggle != null) {
                <div class="pf-l-split__item">
                    <div class="pf-c-page__header-brand-toggle u-cursor-pointer" @onclick="ToggleSidebar" aria-controls="@controlsId">@Toggle</div>
                </div>
            }
            @if (Logo != null)
            {
                <div class="pf-l-split__item">
                    <a href="#" @onclick="@(() => NavigateHome())" class="pf-c-page__header-brand-link">
                        @Logo
                    </a>
                </div>
            }
            </div>
        </div>
        @if (Header != null)
        {
            <div class="pf-c-page__header-nav">@Header</div>
        }
        @if (Tools != null)
        {
            <div class="pf-c-page__header-tools">@Tools</div>
        }
    </header>
    @if (Sidebar != null)
    {
        <div id="@controlsId" class="pf-c-page__sidebar @(sidebar?"pf-m-expanded":"pf-m-collapsed")" aria-expanded="@sidebar">
            <div class="pf-c-page__sidebar-body">@Sidebar</div>
        </div>
    }
    <main class="pf-c-page__main" tabindex="-1" role="main">
        @if (Sections != null)
        {
            @Sections
        }
        @if (Body != null) {
            <section class="page-main-section pf-c-page__main-section @(FillMainContent ? "pf-m-fill" : string.Empty)">@Body</section>
        }
        @if (Footer != null)
        {
            <section class="page-footer-section pf-c-page__main-section @(StickyFooter ? "pf-m-sticky-bottom" : string.Empty) pf-m-no-fill pf-m-dark-200">@Footer</section>
        }
    </main>
</div>

@code {
    public bool sidebar = true;
    public HtmlId controlsId = new();

    [Parameter] public RenderFragment? Toggle { get; set; }
    [Parameter] public RenderFragment? Logo { get; set; }
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? Tools { get; set; }
    [Parameter] public RenderFragment? Sidebar { get; set; }
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public RenderFragment? Footer { get; set; }
    [Parameter] public RenderFragment Sections { get; set; } = default!;

    [Parameter] public bool FillMainContent { get; set; }
    [Parameter] public bool StickyFooter { get; set; }

    void ToggleSidebar()
    {
        this.sidebar = !sidebar;
        this.StateHasChanged();
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        return new string[] { "pf-c-page" };
    }

    protected virtual void NavigateHome()
    {
        this.Nav.NavigateTo("");
    }
}
