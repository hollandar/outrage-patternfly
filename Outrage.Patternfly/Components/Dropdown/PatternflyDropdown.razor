@inherits Patternfly.Components.Base.PatternflyComponentBase
@using Outrage.Patternfly.Interfaces
@implements ICloseOnClick

<CascadingValue Name="@nameof(ICloseOnClick)" Value="this">
    <div class="@Classes" @attributes="AdditionalAttributes">
        <button class="@DropdownButtonClass"
                id="@dropdownId"
                aria-expanded="@Expanded"
                type="button"
                aria-label="Actions"
                @onclick="ToggleDropdown" @onclick:stopPropagation>
            @if (Style == DropdownStyle.regular)
            {
                <span class="pf-c-dropdown__toggle-text">@Text</span>
                <span class="pf-c-dropdown__toggle-icon">
                    <i class="fas fa-caret-down" aria-hidden="true"></i>
                </span>
            }
            @if (Style == DropdownStyle.kebab)
            {
                <i class="fas fa-ellipsis-v" aria-hidden="true"></i>
            }
        </button>
        @if (Expanded)
        {
            if (IsGrouped)
            {
                <div class="pf-c-dropdown__menu @(AlignRight ? "pf-m-align-right": string.Empty)" aria-labelledby="@dropdownId">
                    @ChildContent
                </div>
            }
            else
            {
                <ul class="pf-c-dropdown__menu @(AlignRight ? "pf-m-align-right": string.Empty)" aria-labelledby="@dropdownId">
                    @ChildContent
                </ul>
            }
        }
    </div>
</CascadingValue>

@code {
    [Parameter]
    public bool Expanded { get; set; } = false;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public DropdownStyle Style { get; set; } = DropdownStyle.regular;

    [Parameter]
    public bool AlignRight { get; set; }

    [Parameter]
    public bool IsGrouped { get; set; }

    public string DropdownButtonClass {
        get
        {
            return Style switch
            {
                DropdownStyle.regular => "pf-c-dropdown__toggle",
                DropdownStyle.kebab => "pf-c-dropdown__toggle pf-m-plain",
                _ => string.Empty
            };
        }
    }

    [Parameter]
    public string Text { get; set; } = "Actions";

    HtmlId dropdownId = new HtmlId();

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-c-dropdown" });
        if (Expanded)
        {
            classes.Add("pf-m-expanded");
        }

        return classes;
    }

    void ToggleDropdown()
    {
        this.Expanded = !this.Expanded;
        this.StateHasChanged();
    }

    public async Task CloseAsync()
    {
        this.Expanded = false;
        await this.InvokeAsync(StateHasChanged);
    }
}
