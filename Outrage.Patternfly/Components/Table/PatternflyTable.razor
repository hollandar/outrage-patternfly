@inherits Patternfly.Components.Base.PatternflyComponentBase

@typeparam TItem
@typeparam TItemKey

<CascadingValue Name="Parent" Value="@this">
    <table class="@Classes" @attributes="AdditionalAttributes" role="grid" aria-label="@(Label ?? "")">
        @if (this.Columns != null)
        {
            <thead>
                <tr role="row">
                    @this.Columns
                </tr>
            </thead>
        }

        <tbody role="rowgroup">
            @if (Items != null)
            {
                foreach (var row in Items.Items)
                {
                    <tr role="row" 
                        class="@(UseSelection && row.IsSelected ? "pf-m-selected":"") @(OnRowClicked.HasDelegate?"pf-m-hoverable":"")" 
                        @key="row" 
                        @onclick="@(async (e)=> { await RowClicked(e, row);})">
                        @if (RowTemplate != null)
                        {
                            @RowTemplate(row.Item)
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    @if (Items != null && Items.Items.Count<TableRowWrapper<TItem>>() == 0 && !string.IsNullOrWhiteSpace(NotFoundText))
    {
        <div class="ou-not-found">@NotFoundText</div>
    }

    @if (TotalCount > PageSize)
    {
        <PatternflyPaginator Page="@Page" PageSize="@PageSize" TotalCount="@TotalCount" OnSelectPage="SelectPage" />
    }

</CascadingValue>

@code {

    private TItemKey? loadedId = default(TItemKey);

    [Parameter]
    public RenderFragment? Columns { get; set; }

    [Parameter]
    public Func<TItem, object>? Key { get; set; } = null;

    [Parameter]
    public RenderFragment<TItem>? RowTemplate { get; set; }

    [Parameter]
    public EventCallback<PageSwitchArgs<TItemKey>> OnLoadItems { get; set; }

    [Parameter]
    public TablePageModel<TItem>? Items { get; set; }

    [Parameter]
    public EventCallback<TableRowWrapper<TItem>> OnRowClicked { get; set; }

    [Parameter]
    public bool UseSelection { get; set; } = true;

    [Parameter]
    public string NotFoundText { get; set; } = "No records found.";

    public int TotalCount { get { return this.Items?.Total ?? 0; } }
    public int Page { get; set; } = 0;

    [Parameter]
    public int PageSize { get; set; } = 20;

    [Parameter]
    public TableFallbackPoint Fallback { get; set; } = TableFallbackPoint.Medium;

    [Parameter]
    public string? Label { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Refresh();
    }

    public async Task SelectPage(int page)
    {
        this.Page = page;
        await OnLoadItems.InvokeAsync(new PageSwitchArgs<TItemKey> { Id = loadedId, Page = Page, PageSize = PageSize });
        this.StateHasChanged();
    }

    public async Task SelectById(TItemKey id)
    {
        this.loadedId = id;
        await SelectPage(0);
    }

    public async Task RowClicked(MouseEventArgs args, TableRowWrapper<TItem> wrapper)
    {
        foreach (var row in this.Items?.Items ?? Enumerable.Empty<TableRowWrapper<TItem>>())
        {
            row.IsSelected = row == wrapper;
        }
        await OnRowClicked.InvokeAsync(wrapper);
        this.StateHasChanged();
    }

    public async Task Refresh(bool reset = false)
    {
        if (reset) this.Page = 0;
        await this.InvokeAsync(async () =>
        {
            await OnLoadItems.InvokeAsync(new PageSwitchArgs<TItemKey> { Id = loadedId, Page = Page, PageSize = PageSize });
            this.StateHasChanged();
        });
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-c-table" });
        switch (Fallback)
        {
            case TableFallbackPoint.Custom: classes.Add("pf-m-grid"); break;
            case TableFallbackPoint.Medium: classes.Add("pf-m-grid-md"); break;
            case TableFallbackPoint.Large: classes.Add("pf-m-grid-lg"); break;
            case TableFallbackPoint.XLarge: classes.Add("pf-m-grid-xl"); break;
            case TableFallbackPoint.XXLarge: classes.Add("pf-m-grid-2xl"); break;
        }

        return classes;
    }
}
