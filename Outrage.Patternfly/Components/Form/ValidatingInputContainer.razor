@using System.Linq.Expressions
@implements IDisposable
@inject IJSRuntime JSRuntime

<div @ref="LabelParent" class="labelled-control">

    <div class="edit-surface @(Prefilled?"prefilled":"")">
        @ChildContent
    </div>

    <div class="validation-surface">
        @if (this.validationRequested)
        {
            if (EditContext.GetValidationMessages(For).Any())
            {
                <div class="failing"><i class="far fa-times"></i></div>
            }
            else
            {
                <div class="passing"><i class="far fa-check"></i></div>
            }
        }
    </div>
</div>

<div class="validation-message-container">
    <ValidationMessage For="For" />
</div>

@code {

    ElementReference LabelParent;
    bool validationRequested = false;

    [Parameter]
    public Expression<Func<object>> For { get; set; }

    [CascadingParameter]
    private EditContext EditContext { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Prefilled { get; set; } = false;

    protected override Task OnInitializedAsync()
    {
        this.EditContext.OnFieldChanged += OnFieldChanged;
        this.EditContext.OnValidationStateChanged += OnValidationStateChanged;
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("LabelledControl.Apply", LabelParent);
        }

        base.OnAfterRender(firstRender);
    }

    protected void OnFieldChanged(object sender, FieldChangedEventArgs args)
    {
        string fieldName = null;
        var member = this.For.Body;

        if (member is UnaryExpression)
        {
            var field = member as UnaryExpression;
            member = field.Operand;
        }

        if (member is MemberExpression)
        {
            var field = member as MemberExpression;
            fieldName = field.Member.Name;
        }

        if (fieldName != null && !this.validationRequested && args.FieldIdentifier.FieldName == fieldName)
        {
            this.validationRequested = true;
            this.StateHasChanged();
        }
    }

    protected void OnValidationStateChanged(object sender, ValidationStateChangedEventArgs args)
    {
        this.validationRequested = true;
    }

    public void Dispose()
    {
        this.Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected void Dispose(bool managed = false)
    {
        if (managed)
        {
            this.EditContext.OnFieldChanged -= OnFieldChanged;
            this.EditContext.OnValidationStateChanged -= OnValidationStateChanged;
        }
    }
}
