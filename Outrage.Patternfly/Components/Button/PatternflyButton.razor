<button class="@DeriveClass()" @onclick="OnClicked" @attributes="AdditionalAttributes">
    @if (Icon != null && IconPosition == IconPosition.Start)
    {
        <span class="pf-c-button__icon pf-m-start">
            <i class="@Icon" aria-hidden="true"></i>
        </span>
    }
    @ChildContent
    @if (Icon != null && IconPosition == IconPosition.End)
    {
        <span class="pf-c-button__icon pf-m-end">
            <i class="@Icon" aria-hidden="true"></i>
        </span>
    }
</button>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public Color Color { get; set; }

    [Parameter]
    public string Icon { get; set; } = null;

    [Parameter]
    public IconPosition IconPosition { get; set; } = IconPosition.Start;

    [Parameter]
    public EventCallback<MouseEventArgs> Clicked { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    string DeriveClass()
    {
        List<string> classes = new List<string>(new string[] { "pf-c-button", Class });

        switch (Color)
        {
            case Color.None:
                classes.Add("pf-m-plain");
                break;

            case Color.Primary:
                classes.Add("pf-m-primary");
                break;

            case Color.Secondary:
                classes.Add("pf-m-secondary");
                break;

            case Color.SecondaryDanger:
                classes.Add("pf-m-secondary pf-m-danger");
                break;

            case Color.Tertiary:
                classes.Add("pf-m-tertiary");
                break;

            case Color.Danger:
                classes.Add("pf-m-danger");
                break;

            case Color.Warning:
                classes.Add("pf-m-warning");
                break;

            case Color.Link:
                classes.Add("pf-m-link");
                break;

            case Color.InlineLink:
                classes.Add("pf-m-link pf-m-inline");
                break;

            case Color.LinkDanger:
                classes.Add("pf-m-link pf-m-danger");
                break;

            case Color.Control:
                classes.Add("pf-m-control");
                break;
        }

        return String.Join(" ", classes);
    }

    private async Task OnClicked(MouseEventArgs e)
    {
        await Clicked.InvokeAsync(e);
    }
}
