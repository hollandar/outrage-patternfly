@inherits Outrage.Patternfly.Components.Base.PatternflyComponentBase

@namespace Outrage.Patternfly.Components.Tabs

@using Outrage.Patternfly.Components.Utilities

@implements ITab

<li class="@(Classes) @(tabCssClass)" id="@(TabId)_tab" @attributes="AdditionalAttributes">
    <button class="pf-c-tabs__link" type="button" disabled="@(Disabled)" id="default-example-users-link" title="@(Title)" @onclick="ActivateTab">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <span class="pf-c-tabs__item-icon" aria-hidden="true">
              <Icon Name="@(Icon)" Weight="@IconWeight" Library="@IconLibrary" />
            </span>
        }
        <span class="pf-c-tabs__item-text @(TitleCssClass)">@(Title)</span>
    </button>
</li>

@code {

    [CascadingParameter]
    public PatternflyTabs? ContainerTabSet { get; set; }

    [Parameter] public string TabId { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public Icon.WeightEnum IconWeight { get; set; } = Utilities.Icon.WeightEnum.regular;
    [Parameter] public Icon.LibraryEnum IconLibrary { get; set; } = Utilities.Icon.LibraryEnum.fontawesome;
    [Parameter] public string? PanelCssClass { get; set; }
    [Parameter] public string? TitleCssClass { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }


    private string? tabCssClass => 
        ContainerTabSet?.ActiveTab == this ? "pf-m-current" : null;

    protected override async Task OnInitializedAsync()
    {
        if (ContainerTabSet != null)
            await ContainerTabSet.AddTab(this);
        await base.OnInitializedAsync();
    }

    public async Task ActivateTab()
    {
        if (ContainerTabSet != null)
            await ContainerTabSet.SetActiveTab(this);
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        return new string[] { "pf-c-tabs__item" };
    }
}
