@inherits Patternfly.Components.Base.PatternflyComponentBase

@using Outrage.Patternfly.Components.Backdrop
@using Outrage.Patternfly.Components.Layout
@if (this.Shown)
{
    <PatternflyBackdrop>
        <PatternflyBullseye>
            <div class="@Classes" @attributes="AdditionalAttributes" aria-modal="true" aria-labelledby="@modalId.With("modal-help-title")" aria-describedby="@modalId.With("modal-help-description")">
                <button class="pf-c-button pf-m-plain" type="button" aria-label="Close" @onclick="Hide">
                    <i class="fas fa-times" aria-hidden="true"></i>
                </button>
                <header class="pf-c-modal-box__header pf-m-help">
                    <div class="pf-c-modal-box__header-main">
                        <h1 class="pf-c-modal-box__title" id="@modalId.With("modal-help-title")">
                            @ModalHeader
                        </h1>
                        @if (HelpContent != null)
                        {
                            <div class="pf-c-modal-box__description" id="@modalId.With("modal-help-description")" hidden="@(!HelpShown)">
                                @HelpContent
                            </div>
                        }
                    </div>
                    @if (HelpContent != null)
                    {
                        <div class="pf-c-modal-box__header-help">
                            <button class="pf-c-button pf-m-plain" type="button" aria-label="Help" @onclick="ToggleHelp">
                                <i class="fas fa-question-circle" aria-hidden="true"></i>
                            </button>
                        </div>
                    }
                </header>
                <div class="pf-c-modal-box__body" style="position:relative">
                    @ModalBody
                </div>
                <footer class="pf-c-modal-box__footer">
                    @ModalFooter
                </footer>
            </div>
        </PatternflyBullseye>
    </PatternflyBackdrop>
}

@code {
    HtmlId modalId = new();

    [Parameter]
    public RenderFragment? ModalHeader { get; set; }

    [Parameter]
    public RenderFragment? ModalBody { get; set; }

    [Parameter]
    public RenderFragment? ModalFooter { get; set; }

    [Parameter]
    public RenderFragment? HelpContent { get; set; }

    [Parameter]
    public ModalSize Size { get; set; } = ModalSize.Medium;

    [Parameter]
    public bool Shown { get; set; } = false;

    private bool HelpShown { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ShownChanged { get; set; }

    public async Task Show() { this.Shown = true; await this.InvokeAsync(StateHasChanged); }
    public async Task Hide() { this.Shown = false; await this.InvokeAsync(StateHasChanged); }

    public async Task ToggleHelp()
    {
        this.HelpShown = !this.HelpShown;
        await this.ShownChanged.InvokeAsync(this.HelpShown);
        this.StateHasChanged();
    }

    protected override IEnumerable<string> OnIntroduceClasses()
    {
        var classes = new HashSet<string>(new string[] { "pf-c-modal-box" });
        if (Size == ModalSize.Small)
            classes.Add("pf-m-sm");
        if (Size == ModalSize.Medium)
            classes.Add("pf-m-md");
        if (Size == ModalSize.Large)
            classes.Add("pf-m-lg");

        return classes;
    }
}
